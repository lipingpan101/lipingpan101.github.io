"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"Git Basics","metadata":{"permalink":"/blog/Git Basics","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-02-25-git-basics/index.md","source":"@site/blog/2023-02-25-git-basics/index.md","title":"Git Basics","description":"Here are some commonly used Git commands:","date":"2023-02-25T00:00:00.000Z","formattedDate":"February 25, 2023","tags":[{"label":"Command Line","permalink":"/blog/tags/command-line"},{"label":"Git","permalink":"/blog/tags/git"}],"readingTime":2.445,"hasTruncateMarker":false,"authors":[{"name":"Liping Pan","title":"Maintainer of the website","url":"https://github.com/lipingpan101","key":"liping"}],"frontMatter":{"slug":"Git Basics","title":"Git Basics","authors":["liping"],"tags":["Command Line","Git"]}},"content":"**Here are some commonly used Git commands:**\\n\\n**Introduction Sequence**\\n\\n1. `git commit`: records changes to the repository\\n2. `git commit --amend`: modifies the last commit\\n3. `git branch newImage`: creates a new branch named newImage\\n4. `git checkout <name>`: switches to an existing branch\\n5. `git checkout -b [yourbranchname]`: creates a new branch and switches to it\\n6. `git merge bugFix`: merges the bugFix branch into the current branch\\n7. `git rebase main`: applies the changes from the current branch on top of the main branch\\n\\n**Ramping Up**\\n\\n8. `HEAD`: the symbolic name for the currently checked out commit\\n9. Detaching `HEAD`: attaching it to a commit instead of a branch\\n10. Moving upwards one commit at a time with `^`. Moving upwards a number of times with `~<num>`, e.g., `git checkout HEAD~4`.\\n11. Reassigning a branch to a commit with the `-f` option, e.g., `git branch -f main HEAD~3`, moves the main branch to three parents behind `HEAD`.\\n12. `git reset`: moves a branch backwards as if the commit had never been made. Use git revert instead to reverse changes and share those reversed changes with others.\\n\\n**Moving Work Around**\\n\\n13. `git cherry-pick <commit1> <commit2> <...>`: copies a series of commits below your current location (HEAD)\\n14. `git rebase -i`: opens up a UI to show you which commits are about to be copied below the target of the rebase, e.g., `git rebase -i HEAD~4`\\n\\n**A Mixed Bag**\\n\\n15. `git tag v1 C1`: names the tag v1 and references the commit C1 explicitly\\n16. `git describe <ref>`: describes the commit referenced by `<ref>` in the form of `<tag>_<numCommits>_g<hash>`\\n\\n**Advanced Topics**\\n\\n17. The ^ modifier also accepts an optional number after it, which specifies which parent reference to follow from a merge commit.\\n\\n**Push & Pull -- Git Remotes**\\n\\n18. `git clone`: creates a copy of a remote repository on your local machine.\\n19. Remote branches are on your local repository, not on the remote repository.\\n20. Remote branches have a naming convention in the format of `<remote name>/<branch name>`, e.g., origin/main.\\n21. `git fetch`: downloads changes from the remote repository but does not integrate them into your local repository.\\n22. `git pull`: downloads changes from the remote repository and integrates them into your local repository.\\n23. `git fakeTeamwork <branch> <numCommits>`: simulates a teammate pushing commits to the `<branch>` branch on the remote.\\n24. `git push`: uploads changes from your local repository to the remote repository.\\n\\n**To Origin And Beyond -- Advanced git Remotes**\\n\\n25. `git checkout -b branchname origin/branchname`: creates a new local branch from a remote branch.\\n\\n26. `git branch -u origin/main foo`: sets the foo branch to track origin/main.\\n\\n27. `git push <remote> <place>`: pushes the changes in `<place>` to the specified `<remote>`.\\n\\n28. `git push origin <source>:<destination>`: pushes changes from the `<source>` branch to the `<destination>` branch on the origin remote.\\n\\n29. `git fetch origin <source>:<destination>`: fetches changes from the `<source>` branch on the `"}]}')}}]);