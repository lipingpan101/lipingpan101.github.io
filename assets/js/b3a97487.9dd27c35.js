"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6489],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>m});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(o),f=r,m=c["".concat(s,".").concat(f)]||c[f]||p[f]||i;return o?n.createElement(m,a(a({ref:t},u),{},{components:o})):n.createElement(m,a({ref:t},u))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var d=2;d<i;d++)a[d]=o[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}f.displayName="MDXCreateElement"},6656:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=o(7462),r=(o(7294),o(3905));const i={title:"Front End Build Tools"},a=void 0,l={permalink:"/blog/2023/03/02/build-tool",editUrl:"https://lipingpan101.github.io/blog/2023-03-02-build-tool.md",source:"@site/blog/2023-03-02-build-tool.md",title:"Front End Build Tools",description:'In modern web development, it is common to have multiple JavaScript and CSS files that are organized and modularized for easier development. However, having multiple files can slow down the loading time of a website since each file requires an HTTP request to the server. To solve this issue, developers use front end build tools to create a "build," a production-ready version of the application that combines and compresses all the necessary files into one, resulting in faster loading times.',date:"2023-03-02T00:00:00.000Z",formattedDate:"March 2, 2023",tags:[],readingTime:2.505,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Front End Build Tools"},nextItem:{title:"Routing",permalink:"/blog/2023/03/02/router"}},s={authorsImageUrls:[]},d=[{value:"What is Build?",id:"what-is-build",level:3},{value:"What Do Front End Build Tools Do?",id:"what-do-front-end-build-tools-do",level:3},{value:"How Do Front End Build Tools Work Together?",id:"how-do-front-end-build-tools-work-together",level:3}],u={toc:d},c="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'In modern web development, it is common to have multiple JavaScript and CSS files that are organized and modularized for easier development. However, having multiple files can slow down the loading time of a website since each file requires an HTTP request to the server. To solve this issue, developers use front end build tools to create a "build," a production-ready version of the application that combines and compresses all the necessary files into one, resulting in faster loading times.'),(0,r.kt)("p",null,"Front end build tools come in various types and can be confusing to navigate for developers. Some examples of front end build tools include Node, NPM, Webpack, Rollup, Parcel, Vite, Prettier, and ESLint. In this blog, we will discuss what front end build tools are, what they do, and how they work together."),(0,r.kt)("h3",{id:"what-is-build"},"What is Build?"),(0,r.kt)("p",null,'Before delving into front end build tools, it is important to understand what a "build" is. In software development, a build is the process of converting source code files into standalone software artifact(s) that can be run on a computer. In web development, this process involves merging and compressing multiple JavaScript and CSS files into one, as well as converting Sass or other preprocessing languages into CSS.'),(0,r.kt)("h3",{id:"what-do-front-end-build-tools-do"},"What Do Front End Build Tools Do?"),(0,r.kt)("p",null,"Front end build tools are essential for automating the process of creating a build. The two main functions of these tools are to install dependencies and to execute tasks such as compiling, packaging, compressing, and checking code style. Depending on the tool, it may be geared towards installation or execution."),(0,r.kt)("p",null,"Tools like npm and Yarn are primarily installation tools and can install any front-end library or even other build tools. In contrast, tools like Parcel, Webpack, and Vite are primarily execution tools and are designed to automate tedious and error-prone tasks in web development."),(0,r.kt)("p",null,"Node and npm are the grandfathers of front end build tools and are used to install and run most other build tools. Node is a tool for running JavaScript files and servers, while npm is a tool for installing and managing front-end libraries and build tools."),(0,r.kt)("h3",{id:"how-do-front-end-build-tools-work-together"},"How Do Front End Build Tools Work Together?"),(0,r.kt)("p",null,"There is no one correct combination of front end build tools, and developers may even choose to forego using any tools altogether. However, the manual process of copying and pasting code is tedious and time-consuming, making it impractical for most web development projects."),(0,r.kt)("p",null,"A common combination of front end build tools includes using npm or Yarn to install front-end libraries and build tools, using Webpack or Parcel to bundle and compress files, using ESLint or Prettier for code style checking and formatting, and using Jest or Cypress for testing."),(0,r.kt)("p",null,"In conclusion, front end build tools are essential for automating the process of creating a production-ready version of a web application. These tools come in various types, and each has its unique features and strengths. Understanding how front end build tools work together can significantly improve a developer's workflow and productivity."))}p.isMDXComponent=!0}}]);