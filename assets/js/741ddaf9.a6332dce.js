"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[19],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,f=p["".concat(l,".").concat(u)]||p[u]||d[u]||o;return n?a.createElement(f,i(i({ref:t},m),{},{components:n})):a.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4815:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={title:"TDD Benefits for Beginners"},i=void 0,s={permalink:"/blog/2023/02/23/TDD-benefits",editUrl:"https://lipingpan101.github.io/blog/2023-02-23-TDD-benefits.md",source:"@site/blog/2023-02-23-TDD-benefits.md",title:"TDD Benefits for Beginners",description:"Test-Driven Development (TDD) is an approach to software development that involves writing tests before writing code. By writing tests first, developers can ensure that their code is working as expected, and they can catch bugs early in the development process. TDD can be especially beneficial for beginners, as it can help them to break down tasks into smaller, more manageable chunks, and to focus on writing clean, maintainable code.",date:"2023-02-23T00:00:00.000Z",formattedDate:"February 23, 2023",tags:[],readingTime:4.19,hasTruncateMarker:!1,authors:[],frontMatter:{title:"TDD Benefits for Beginners"},prevItem:{title:"Git Basics",permalink:"/blog/2023/02/25/git-basics"},nextItem:{title:"React Hooks",permalink:"/blog/2023/02/23/react-hooks"}},l={authorsImageUrls:[]},c=[],m={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Test-Driven Development (TDD) is an approach to software development that involves writing tests before writing code. By writing tests first, developers can ensure that their code is working as expected, and they can catch bugs early in the development process. TDD can be especially beneficial for beginners, as it can help them to break down tasks into smaller, more manageable chunks, and to focus on writing clean, maintainable code."),(0,r.kt)("p",null,'One of the key benefits of TDD is that it helps developers to write better code by forcing them to think about the functionality of their code before they write it. This is especially important for beginners who may not have as much experience in writing code. When writing tests first, developers must break down the functionality of their code into smaller, testable units, which can help to make the task of writing code more manageable. This process of breaking down tasks into smaller units is known as "tasking", and it\'s a key part of TDD.'),(0,r.kt)("p",null,"To illustrate the benefits of TDD, let's look at an example of a React component. Suppose we want to create a registration form for a website that allows users to sign up for an account. Here's how we could use TDD to write this feature:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"First, we write a test that checks that the registration form contains all the necessary fields:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"test('registration form contains required fields', () => {\n    const { getByLabelText } = render(<RegistrationForm />);\n    expect(getByLabelText(/username/i)).toBeInTheDocument();\n    expect(getByLabelText(/email/i)).toBeInTheDocument();\n    expect(getByLabelText(/password/i)).toBeInTheDocument();\n    expect(getByLabelText(/confirm password/i)).toBeInTheDocument();\n});\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Next, we write a test that checks that the form cannot be submitted if any of the fields are empty:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"test('form cannot be submitted if fields are empty', () => {\n    const { getByLabelText, getByRole } = render(<RegistrationForm />);\n    fireEvent.click(getByRole('button'));\n\n    expect(getByLabelText(/username/i)).toHaveAttribute('required');\n    expect(getByLabelText(/email/i)).toHaveAttribute('required');\n    expect(getByLabelText(/password/i)).toHaveAttribute('required');\n    expect(getByLabelText(/confirm password/i)).toHaveAttribute('required');\n});\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then, we write a test that checks that the form cannot be submitted if the passwords don't match:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"test('form cannot be submitted if passwords do not match', () => {\n    const { getByLabelText, getByRole } = render(<RegistrationForm />);\n    const usernameField = getByLabelText(/username/i);\n    const emailField = getByLabelText(/email/i);\n    const passwordField = getByLabelText(/password/i);\n    const confirmPasswordField = getByLabelText(/confirm password/i);\n\n    fireEvent.change(usernameField, { target: { value: 'testuser' } });\n    fireEvent.change(emailField, { target: { value: 'testuser@example.com' } });\n    fireEvent.change(passwordField, { target: { value: 'password' } });\n    fireEvent.change(confirmPasswordField, { target: { value: 'not the same password' } });\n\n    fireEvent.click(getByRole('button'));\n\n    expect(getByLabelText(/password/i)).toHaveAttribute('aria-invalid', 'true');\n    expect(getByLabelText(/confirm password/i)).toHaveAttribute('aria-invalid', 'true');\n});\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Finally, we write a test that checks that the form can be submitted if all fields are filled out correctly:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"test('form can be submitted if all fields are filled out correctly', () => {\n  const { getByLabelText, getByRole } = render(<RegistrationForm />);\n  const usernameField = getByLabelText(/username/i);\n  const emailField = getByLabelText(/email/i);\n  const passwordField = getByLabelText(/password/i);\n  const confirmPasswordField = getByLabelText(/confirm password/i);\n  \n  fireEvent.change(usernameField, { target: { value: 'testuser' } });\n  fireEvent.change(emailField, { target: { value: 'testuser@example.com' } });\n  fireEvent.change(passwordField, { target: { value: 'password' } });\n  fireEvent.change(confirmPasswordField, { target: { value: 'password' } });\n\n  fireEvent.click(getByRole('button'));\n\n  expect(getByLabelText(/success message/i)).toBeInTheDocument();\n});\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Once all tests are passing, we can implement the code for the RegistrationForm component:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from \'react\';\n\nfunction RegistrationForm(props) {\n  const [formData, setFormData] = React.useState({\n    username: \'\',\n    email: \'\',\n    password: \'\',\n    confirmPassword: \'\'\n  });\n  const [formError, setFormError] = React.useState(\'\');\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    setFormData(formData => ({\n      ...formData,\n      [name]: value\n    }));\n  }\n\nfunction handleSubmit(event) {\n    event.preventDefault();\n    if (formData.password !== formData.confirmPassword) {\n      setFormError(\'Passwords do not match\');\n    } else {\n      // Call API to submit registration form data\n      // If successful, display success message\n    }\n  }\n  \n    return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor="username">Username</label>\n        <input\n          type="text"\n          id="username"\n          name="username"\n          value={formData.username}\n          onChange={handleChange}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor="email">Email</label>\n        <input\n          type="email"\n          id="email"\n          name="email"\n          value={formData.email}\n          onChange={handleChange}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor="password">Password</label>\n        <input\n          type="password"\n          id="password"\n          name="password"\n          value={formData.password}\n          onChange={handleChange}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor="confirmPassword">Confirm Password</label>\n        <input\n          type="password"\n          id="confirmPassword"\n          name="confirmPassword"\n          value={formData.confirmPassword}\n          onChange={handleChange}\n          required\n        />\n      </div>\n      {formError && <div className="error">{formError}</div>}\n      <button type="submit">Submit</button>\n    </form>\n  );\n}\n')))),(0,r.kt)("p",null,"Here, we've implemented a RegistrationForm component that uses the formData state to track the user's input, and the formError state to display an error message if the passwords don't match. The handleChange function updates the formData state whenever the user enters or modifies a value, and the handleSubmit function checks whether the passwords match before submitting the form."),(0,r.kt)("p",null,"By using TDD to write this feature, we were able to break down the task of creating a registration form into smaller, testable pieces, and we were able to ensure that each piece of code worked correctly before moving on to the next one. This approach helped us write code that was more modular, more maintainable, and less error-prone, which can be especially helpful for beginners who may not have as much experience with writing code."),(0,r.kt)("p",null,"In summary, Test-Driven Development can be a valuable tool for beginners to break down tasks into smaller, testable units, and to focus on writing clean, maintainable code. By using TDD, beginners can ensure that their code is working as expected, catch bugs early in the development process, and ultimately become better developers."))}d.isMDXComponent=!0}}]);