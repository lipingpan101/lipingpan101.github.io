"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[687],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),p=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(m.Provider,{value:t},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(n),g=r,u=s["".concat(m,".").concat(g)]||s[g]||h[g]||i;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[s]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={slug:"Git Basics",title:"Git Basics",authors:["liping"],tags:["Command Line","Git"]},o=void 0,l={permalink:"/blog/Git Basics",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-02-25-git-basics/index.md",source:"@site/blog/2023-02-25-git-basics/index.md",title:"Git Basics",description:"Here are some commonly used Git commands:",date:"2023-02-25T00:00:00.000Z",formattedDate:"February 25, 2023",tags:[{label:"Command Line",permalink:"/blog/tags/command-line"},{label:"Git",permalink:"/blog/tags/git"}],readingTime:2.445,hasTruncateMarker:!1,authors:[{name:"Liping Pan",title:"Maintainer of the website",url:"https://github.com/lipingpan101",key:"liping"}],frontMatter:{slug:"Git Basics",title:"Git Basics",authors:["liping"],tags:["Command Line","Git"]}},m={authorsImageUrls:[void 0]},p=[],c={toc:p},s="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Here are some commonly used Git commands:")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Introduction Sequence")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git commit"),": records changes to the repository"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git commit --amend"),": modifies the last commit"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git branch newImage"),": creates a new branch named newImage"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git checkout <name>"),": switches to an existing branch"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git checkout -b [yourbranchname]"),": creates a new branch and switches to it"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git merge bugFix"),": merges the bugFix branch into the current branch"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git rebase main"),": applies the changes from the current branch on top of the main branch")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ramping Up")),(0,r.kt)("ol",{start:8},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"HEAD"),": the symbolic name for the currently checked out commit"),(0,r.kt)("li",{parentName:"ol"},"Detaching ",(0,r.kt)("inlineCode",{parentName:"li"},"HEAD"),": attaching it to a commit instead of a branch"),(0,r.kt)("li",{parentName:"ol"},"Moving upwards one commit at a time with ",(0,r.kt)("inlineCode",{parentName:"li"},"^"),". Moving upwards a number of times with ",(0,r.kt)("inlineCode",{parentName:"li"},"~<num>"),", e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"git checkout HEAD~4"),"."),(0,r.kt)("li",{parentName:"ol"},"Reassigning a branch to a commit with the ",(0,r.kt)("inlineCode",{parentName:"li"},"-f")," option, e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"git branch -f main HEAD~3"),", moves the main branch to three parents behind ",(0,r.kt)("inlineCode",{parentName:"li"},"HEAD"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git reset"),": moves a branch backwards as if the commit had never been made. Use git revert instead to reverse changes and share those reversed changes with others.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Moving Work Around")),(0,r.kt)("ol",{start:13},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git cherry-pick <commit1> <commit2> <...>"),": copies a series of commits below your current location (HEAD)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git rebase -i"),": opens up a UI to show you which commits are about to be copied below the target of the rebase, e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"git rebase -i HEAD~4"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A Mixed Bag")),(0,r.kt)("ol",{start:15},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git tag v1 C1"),": names the tag v1 and references the commit C1 explicitly"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git describe <ref>"),": describes the commit referenced by ",(0,r.kt)("inlineCode",{parentName:"li"},"<ref>")," in the form of ",(0,r.kt)("inlineCode",{parentName:"li"},"<tag>_<numCommits>_g<hash>"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Advanced Topics")),(0,r.kt)("ol",{start:17},(0,r.kt)("li",{parentName:"ol"},"The ^ modifier also accepts an optional number after it, which specifies which parent reference to follow from a merge commit.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Push & Pull -- Git Remotes")),(0,r.kt)("ol",{start:18},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git clone"),": creates a copy of a remote repository on your local machine."),(0,r.kt)("li",{parentName:"ol"},"Remote branches are on your local repository, not on the remote repository."),(0,r.kt)("li",{parentName:"ol"},"Remote branches have a naming convention in the format of ",(0,r.kt)("inlineCode",{parentName:"li"},"<remote name>/<branch name>"),", e.g., origin/main."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git fetch"),": downloads changes from the remote repository but does not integrate them into your local repository."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git pull"),": downloads changes from the remote repository and integrates them into your local repository."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git fakeTeamwork <branch> <numCommits>"),": simulates a teammate pushing commits to the ",(0,r.kt)("inlineCode",{parentName:"li"},"<branch>")," branch on the remote."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"git push"),": uploads changes from your local repository to the remote repository.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To Origin And Beyond -- Advanced git Remotes")),(0,r.kt)("ol",{start:25},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"git checkout -b branchname origin/branchname"),": creates a new local branch from a remote branch.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"git branch -u origin/main foo"),": sets the foo branch to track origin/main.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"git push <remote> <place>"),": pushes the changes in ",(0,r.kt)("inlineCode",{parentName:"p"},"<place>")," to the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"<remote>"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"git push origin <source>:<destination>"),": pushes changes from the ",(0,r.kt)("inlineCode",{parentName:"p"},"<source>")," branch to the ",(0,r.kt)("inlineCode",{parentName:"p"},"<destination>")," branch on the origin remote.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"git fetch origin <source>:<destination>"),": fetches changes from the ",(0,r.kt)("inlineCode",{parentName:"p"},"<source>")," branch on the `"))))}h.isMDXComponent=!0}}]);